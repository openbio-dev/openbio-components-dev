import WS from '../../utils/websocket';
import { HTMLStencilElement } from '../../stencil.core';
export declare class OpenbioSignatureComponentDetails {
    ws: WS;
    private wsStatusInterval;
    private canvas?;
    private person;
    private payload;
    componentContainer: HTMLStencilElement;
    detached: boolean;
    isTagComponent: boolean;
    tempPerson: any;
    tempSignature: any;
    deviceReady: boolean;
    deviceOpened: boolean;
    originalImage: string;
    rawImage: string;
    points: any[];
    dpiValue: number;
    tab: number;
    anomalyOptions: Array<any>;
    anomaly: number;
    signature: any;
    backendSession: any;
    showLoader: boolean;
    isCapturing: boolean;
    model: string;
    brand: string;
    serial: string;
    deviceStatus: boolean;
    serviceConfigs: any;
    captureDone: boolean;
    serviceTime: any;
    cropperModal: boolean;
    uploadedBase64: any;
    translations: any;
    locale: string;
    listenLocale(newValue: string): Promise<void>;
    componentWillLoad(): Promise<void>;
    setI18nParameters(locale: any): Promise<void>;
    clearImages(): void;
    clearImagesObjects(): void;
    clear(): void;
    startPreview(backToPreview?: boolean): void;
    close(): void;
    stopPreview(): void;
    getFinishTitle(): string;
    capture(): void;
    open(): void;
    componentDidLoad(): void;
    componentDidUnload(): void;
    acceptData(): void;
    emitLoadInformation(): void;
    sendBiometryInformation(signature: any): void;
    activeTabClass(num: number): "" | "is-active";
    setActiveTab(num: number): void;
    setSelection(event: any): void;
    saveAnomaly(): void;
    saveSignature(saveAnomaly?: boolean): Promise<void>;
    storeCapturedSignature(parsedValue: any): void;
    onInputChange(files: any): Promise<void>;
    fileToBase64: (file: any) => Promise<unknown>;
    _base64ToArrayBuffer(base64: any): ArrayBuffer | SharedArrayBuffer;
    cropCallback(_this: any, croppedBase64Image: string): void;
    normalizeImage(): Promise<void>;
    render(): any;
}
